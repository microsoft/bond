<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <Import Project="..\..\..\..\cs\build\nuget\Bond.CSharp.props" />
  <PropertyGroup>
    <ProjectGuid>{2962BDD2-D939-4059-BC89-EAC4E83A24AA}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <RootNamespace>import</RootNamespace>
    <AssemblyName>import</AssemblyName>
    <TargetFrameworkVersion>v4.6.2</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="program.cs" />
  </ItemGroup>
  <ItemGroup>
    <!-- Set up where gbc will look to resolve import statements. -->
    <BondImportDirectory Include="common" />
  </ItemGroup>
  <ItemGroup>
    <BondCodegen Include="schema.bond" />
    <!-- Importing doesn't include the types in the importee's generated
         code. We still need an implementation of those types. Here, we
         chose to run codegen on the imported files. Another option would be
         to run codegen in a different project and reference that project
         (e.g., a common library shared across a bunch of different consumer
         projects) -->
    <BondCodegen Include="common\common.bond" />
    <BondCodegen Include="common\protocol\header.bond" />
    <!-- Resharper Workaround -->
    <Compile Include="$(IntermediateOutputPath)\schema_types.cs" Condition="False" />
    <Compile Include="$(IntermediateOutputPath)\common_types.cs" Condition="False" />
    <Compile Include="$(IntermediateOutputPath)\header_types.cs" Condition="False" />
    <!-- End Resharper Workaround -->
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\..\..\cs\src\attributes\Attributes.csproj" />
    <ProjectReference Include="..\..\..\..\cs\src\core\Bond.csproj" />
    <ProjectReference Include="..\..\..\..\cs\src\io\IO.csproj" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Import Project="$(BOND_PATH)\build\nuget\Bond.CSharp.targets" />
</Project>
