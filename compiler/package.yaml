name:                bond
version:             0.13.0.0
github:              "microsoft/bond"
license:             MIT
author:              Adam Sapek <adamsap@microsoft.com>
maintainer:          Bond Development Team <bond-dev@microsoft.com>
copyright:           Copyright (c) Microsoft. All rights reserved.


# Metadata used when publishing your package
synopsis:            Bond schema compiler and code generator
category:            Language, Compiler, Code Generation

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:        Bond is a cross-platform framework for handling schematized
                    data. It supports cross-language de/serialization and
                    powerful generic mechanisms for efficiently manipulating
                    data.
                    .
                    This package contains a library for parsing the Bond
                    schema definition language and performing template-based
                    code generation. The library includes built-in templates
                    for generating standard Bond C++ and C# code, as well as
                    utilities for writing custom codegen templates.
                    .
                    The package also contains a command-line compiler/codegen
                    tool, named gbc, which is primarily used to generate code
                    for C++ and C# programs using Bond.


dependencies:
- base >= 4.7 && < 5
- aeson
- bytestring
- filepath
- mtl
- megaparsec
- scientific
- shakespeare
- text
- unordered-containers

flags:
  warningsAsErrors:
     description: Treat warnings as errors for building bond
     manual : True
     default: False


library:
  source-dirs: src
  when:
   - condition: os(windows) && arch(i386)
     ld-options:     -Wl,--dynamicbase -Wl,--nxcompat -Wl,--large-address-aware
   - condition: os(windows) && arch(x86_64)
     ld-options:     -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va
   - condition: flag(warningsAsErrors)
     ghc-options: -Wall -Werror

executables:
  gbc:
    main:                Main.hs
    source-dirs:         .
    dependencies:
      - bond
      - async
      - base
      - bytestring
      - cmdargs
      - process
      - directory
      - filepath
      - monad-loops
      - text
      - megaparsec
    when:
      - condition: os(windows) && arch(i386)
        ld-options: -Wl,--dynamicbase -Wl,--nxcompat -Wl,--large-address-aware
      - condition: os(windows) && arch(x86_64)
        ld-options: -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va
      - condition: flag(warningsAsErrors)
        then:
          ghc-options: -threaded -rtsopts -with-rtsopts=-N -Wall -Werror
        else:
          ghc-options: -threaded -rtsopts -with-rtsopts=-N

tests:
  gbc-tests:
    main:                TestMain.hs
    source-dirs:
      - tests
      - .
    other-modules:
      - Tests.Codegen
      - Tests.Codegen.Util
      - Tests.Syntax
      - Tests.Syntax.JSON
      - Paths_bond
      - IO
      - Options

    dependencies:
    - bond
    - aeson
    - aeson-pretty
    - base
    - bytestring
    - cmdargs
    - directory
    - filepath
    - monad-loops
    - text
    - HUnit
    - QuickCheck
    - Diff
    - pretty
    - tasty
    - tasty-golden
    - tasty-hunit
    - tasty-quickcheck
    - shakespeare
    - megaparsec
    - quickcheck-arbitrary-template
    when:
      - condition: os(windows) && arch(i386)
        ld-options: -Wl,--dynamicbase -Wl,--nxcompat -Wl,--large-address-aware
      - condition: os(windows) && arch(x86_64)
        ld-options: -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va
      - condition: flag(warningsAsErrors)
        then:
          ghc-options: -threaded -rtsopts -with-rtsopts=-N -Wall -Werror
        else:
          ghc-options: -threaded -rtsopts -with-rtsopts=-N
